name: Deploy Argo Application

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: environment to deploy
        required: true
      service_name:
        type: string
        description: service name
        required: true
    secrets:
      ARGOCD_AUTH_TOKEN:
        required: true

permissions:
  id-token: write
  contents: write
  pull-requests: write
  repository-projects: write
jobs:
  deploy:
    name: Deploy Argo Application
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Check out sources code
        uses: actions/checkout@v4

      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Create PR promote image tag
        id: createPrId
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KUSTOMIZATION_PATH: manifests/overlays/${{ inputs.environment }}/kustomization.yaml
          SERVICE_NAME: ${{ inputs.service_name }}
        run: |
          # configure git client
          git config user.name github-actions
          git config user.email github-actions@github.com

          # get the image tag
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          export NEW_BRANCH=${{ inputs.environment }}/$calculatedSha
          echo "NEW_BRANCH=$NEW_BRANCH" >> $GITHUB_OUTPUT
          export IMAGE_TAG=$SERVICE_NAME-$calculatedSha
          
          # create a new branch
          git pull origin ${{ steps.extract_branch.outputs.branch }}
          git checkout -b $NEW_BRANCH
          
          # merge specific file from ${{ steps.extract_branch.outputs.branch }}
          git checkout ${{ steps.extract_branch.outputs.branch }} $KUSTOMIZATION_PATH
          yq e -i '.images[0].newTag= env(IMAGE_TAG)' $KUSTOMIZATION_PATH
          git add $KUSTOMIZATION_PATH
          
          numOfFilesChanged=$( git diff --name-only origin/${{ steps.extract_branch.outputs.branch }} | wc -l )
          echo "The number of files is different between the branches $NEW_BRANCH and ${{ steps.extract_branch.outputs.branch }}: $numOfFilesChanged"
          
          if [ $numOfFilesChanged -gt 0 ]; then
            # push the change to the new branch
            git commit -m "Update image tag of ${{ inputs.environment }} environment"
            git push -u origin $NEW_BRANCH
            
            #create pr
            gh pr create \
              -B ${{ steps.extract_branch.outputs.branch }} \
              -H $NEW_BRANCH\
              --title "Promote deploy ${{ inputs.environment }} environment" \
              --body "Automatically created by GitHub Actions" \

          fi

      - name: Merge PR
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN   }}
          NEW_BRANCH: ${{ steps.createPrId.outputs.NEW_BRANCH }}
        run: |
          gh pr merge ${{ env.NEW_BRANCH }} --merge --admin --delete-branch

      - name: 'Pre-Release'
        if: ${{ inputs.environment == 'tst' }}
        uses: 'cycjimmy/semantic-release-action@v4'
        id: semantic_rc
        with:
          semantic_version: 24.0.0
          branch: ${{ steps.extract_branch.outputs.branch }}
          dry_run: true
          extra_plugins: |
            "@semantic-release/git"
            "@semantic-release/exec"
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN  }}'

      - name: 'Release Candidate'
        if: ${{ inputs.environment == 'tst' && env.NEXT_RELEASE_VERSION != '' }}
        uses: actions/github-script@v7
        env:
          NEXT_RELEASE_VERSION: ${{ env.NEXT_RELEASE_VERSION }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = process.env.NEXT_RELEASE_VERSION;
            const newTag = `v${version}-rc`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/tags/${newTag}`,
              sha: context.sha,
            });
            console.log(`Created new tag ${newTag}`);
            return { rc_tag: newTag, new_rc_release_published: true };

      - name: 'Release'
        if: ${{ inputs.environment == 'prod' }}
        uses: 'cycjimmy/semantic-release-action@v4'
        id: semantic
        with:
          semantic_version: 24.0.0
          branch: ${{ steps.extract_branch.outputs.branch }}
          extra_plugins: |
            "@semantic-release/github"
            "@semantic-release/changelog"
            "@semantic-release/git"
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN  }}'

      - name: Determine target revision
        id: determine_revision
        run: |
          if [[ "${{ steps.semantic.outputs.new_release_published }}" == 'true' ]]; then
            echo "target_revision=${{ steps.semantic.outputs.new_release_git_tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.semantic_rc.outputs.new_rc_release_published }}" == 'true' ]]; then
            echo "target_revision=${{ steps.semantic_rc.outputs.rc_tag }}" >> $GITHUB_OUTPUT
          else
            echo "target_revision=${{ steps.extract_branch.outputs.branch }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Application
        env:
          APPLICATION_PATH: app-managers/overlays/${{ inputs.environment }}
          APPLICATION_FILE_NAME: application-${{ inputs.environment }}.yaml
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
          SERVER_ADDRESS: argo.dep.icariohealth.io
          TARGET_REVISION: ${{ steps.determine_revision.outputs.target_revision }}
        run: |
          echo -e "\n- op: 'replace'\n  path: '/spec/source/targetRevision'\n  value: '$TARGET_REVISION'" >> $APPLICATION_PATH/application.yaml
          kustomize build $APPLICATION_PATH > $APPLICATION_FILE_NAME
          argocd app create -f  $APPLICATION_FILE_NAME --auth-token $ARGOCD_AUTH_TOKEN --server $SERVER_ADDRESS --upsert
